////////////////////////////////////////////////////////////////////////////////////////////
// config structure
////////////////////////////////////////////////////////////////////////////////////////////
struct Payload {
	int rayType;
	uint reflectionCount;
	float4 color;
	int isCollision;
	float length; // origin to hit position
};

namespace RAYTYPE { // raytype enum
	static int VIEW       = 0;
	static int REFLECTION = 1;
	static int COLLISION  = 2;
}

struct MyAttribute {
	float2 barys;
};

// raysettings //
static const RAY_FLAG flags = RAY_FLAG_CULL_BACK_FACING_TRIANGLES; // culling back
static const uint rayMask = 0xFF;
static const float kTMin = 0.0001f;
static const uint kLimitReflectionCount = 10;

////////////////////////////////////////////////////////////////////////////////////////////
// Vertex structure
////////////////////////////////////////////////////////////////////////////////////////////
struct Vertex {
	float4 position;
	float2 texcoord;
	float3 normal;
};

////////////////////////////////////////////////////////////////////////////////////////////
// hitgroup methods
////////////////////////////////////////////////////////////////////////////////////////////

inline float3 CalcBarycentrics(float2 barys) {
	return float3(
		1.0f - barys.x - barys.y,
		barys.x,
		barys.y
	);
}